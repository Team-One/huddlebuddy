{
  "name": "memdown",
  "description": "An drop-in replacement for LevelDOWN that works in memory only",
  "version": "0.5.1",
  "homepage": "https://github.com/rvagg/node-memdown",
  "authors": [
    "Rod Vagg <rod@vagg.org> (https://github.com/rvagg)"
  ],
  "contributors": [
    {
      "name": "Julian Gruber",
      "email": "julian@juliangruber.com",
      "url": "https://github.com/juliangruber"
    }
  ],
  "keywords": [
    "leveldb",
    "leveldown",
    "levelup",
    "memory"
  ],
  "main": "./memdown.js",
  "repository": {
    "type": "git",
    "url": "https://github.com/rvagg/node-memdown.git"
  },
  "dependencies": {
    "abstract-leveldown": "~0.11.0",
    "bops": "~0.1.0"
  },
  "devDependencies": {
    "tape": "*",
    "rimraf": "*"
  },
  "browser": {
    "rimraf": false
  },
  "scripts": {
    "test": "node ./test.js --stderr"
  },
  "testling": {
    "files": "test.js",
    "browsers": [
      "ie/8..latest",
      "firefox/17..latest",
      "firefox/nightly",
      "chrome/22..latest",
      "chrome/canary",
      "opera/12..latest",
      "opera/next",
      "safari/5.1..latest",
      "ipad/6.0..latest",
      "iphone/6.0..latest",
      "android-browser/4.2..latest"
    ]
  },
  "license": "MIT",
  "readme": "# MemDOWN\n\n**A drop-in replacement for [LevelDOWN](https://github.com/rvagg/node-leveldown) that works in memory only. Can be used as a back-end for [LevelUP](https://github.com/rvagg/node-levelup) rather than an actual LevelDB store.**\n\n[![NPM](https://nodei.co/npm/memdown.png?compact=true)](https://nodei.co/npm/memdown/) \n\n[![Travis](https://secure.travis-ci.org/rvagg/node-memdown.png)](http://travis-ci.org/rvagg/node-memdown)\n\n![Testling](https://ci.testling.com/rvagg/node-memdown.png)\n\n*Note: the above tests include the use of `TypedArray`s. If you don't use them then you can likely ignore the failures.*\n\nAs of version 0.7, LevelUP allows you to pass a `'db'` option when you create a new instance. This will override the default LevelDOWN store with a LevelDOWN API compatible object. MemDOWN conforms exactly to the LevelDOWN API but only performs operations in memory, so your data is discarded when the process ends or you release a reference to the database.\n\n## Example\n\n```js\nvar MemDOWN = require('memdown')\n  , levelup = require('levelup')\n  , db = levelup('/does/not/matter', { db: MemDOWN })\n\ndb.put('name', 'Yuri Irsenovich Kim')\ndb.put('dob', '16 February 1941')\ndb.put('spouse', 'Kim Young-sook')\ndb.put('occupation', 'Clown')\n\ndb.readStream()\n  .on('data', console.log)\n  .on('close', function () { console.log('Show\\'s over folks!') })\n```\n\nNote in this example we're not even bothering to use callbacks on our `.put()` methods even though they are async. We know that MemDOWN operates immediately so the data will go straight into the store.\n\nRunning our example gives:\n\n```\n{ key: 'dob', value: '16 February 1941' }\n{ key: 'name', value: 'Yuri Irsenovich Kim' }\n{ key: 'occupation', value: 'Clown' }\n{ key: 'spouse', value: 'Kim Young-sook' }\nShow's over folks!\n```\n\n## Licence\n\nMemDOWN is Copyright (c) 2013 Rod Vagg [@rvagg](https://twitter.com/rvagg) and licensed under the MIT licence. All rights not explicitly granted in the MIT license are reserved. See the included LICENSE file for more details.\n",
  "readmeFilename": "README.md",
  "bugs": {
    "url": "https://github.com/rvagg/node-memdown/issues"
  },
  "_id": "memdown@0.5.1",
  "dist": {
    "shasum": "a1016cb5d20c710f7ae3a0360a3ed25a5b531f04"
  },
  "_from": "memdown@~0.5.1",
  "_resolved": "https://registry.npmjs.org/memdown/-/memdown-0.5.1.tgz"
}
